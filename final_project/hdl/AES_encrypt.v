module AES_encrypt(
	input clk,
	input rst,//rst=0
	input [0:127] data,         
	input [0:127] init_key,		 
	output reg[0:127] cipher,
	output reg cipher_ready
	/*output integer round,
	output reg [0:127] key_1, //check the 1st roundkey W4~W7
	output reg [0:127] key_2, //check the 1st roundkey W4~W7
	output reg [0:127] key_3, //check the 1st roundkey W4~W7
	output reg [0:127] key_4, //check the 1st roundkey W4~W7
	output reg [0:127] key_5, //check the 1st roundkey W4~W7
	output reg [0:127] key_6, //check the 1st roundkey W4~W7
	output reg [0:127] key_7, //check the 1st roundkey W4~W7
	output reg [0:127] key_8, //check the 1st roundkey W4~W7
	output reg [0:127] key_9, //check the 1st roundkey W4~W7
	output reg [0:127] key_10, //check the 1st roundkey W4~W7
	output reg [0:127] add , //check the 1st add round key (with initial key)
	output reg [0:127] sub , //check 1st subbytes
	output reg [0:127] shift,//check 1st shiftrow
	output reg [0:127] mix  //check first mixcolumns*/
);
integer i;
integer round;//integer round;//record which round is executed
reg [3:0] cstate,nstate;
parameter s_reset=4'd0,CalculateRoundKey=4'd1,CalculateRoundKey_2=4'd2,CalculateRoundKey_3=4'd3,CalculateRoundKey_4=4'd4,AddRoundKey=4'd5
         ,SubBytes=4'd6,ShiftRows=4'd7,CalculateMixColumns_double=4'd8,CalculateMixColumns_triple=4'd9,MixColumns=4'd10,done=4'd11;
reg [7:0] s_box [255:0];
reg [7:0] plaintext [15:0];
reg [7:0] plaintext_double [15:0];
reg [7:0] plaintext_triple [15:0];
reg [31:0] W [43:0]; //round key W[0]~W[3]:initial key ;W[4]~W[7]:first round key ;and so on...
reg [31:0] Rcon [10:0];

always@(posedge clk)begin
	if(!rst)
		cstate<=s_reset;
	else 
		cstate<=nstate;
end

always@(*)begin
	case(cstate)
		s_reset:nstate=AddRoundKey;
		CalculateRoundKey:nstate=CalculateRoundKey_2;
		CalculateRoundKey_2:nstate=CalculateRoundKey_3;
		CalculateRoundKey_3:nstate=CalculateRoundKey_4;
		CalculateRoundKey_4:nstate=AddRoundKey;
		AddRoundKey:nstate=(round==10)?done:SubBytes;
		SubBytes:nstate=ShiftRows;
		ShiftRows:nstate=(round==10)?CalculateRoundKey:CalculateMixColumns_double;
		CalculateMixColumns_double:nstate=CalculateMixColumns_triple;
		CalculateMixColumns_triple:nstate=MixColumns;
		MixColumns:nstate=CalculateRoundKey;
		done:nstate=done;
		default:nstate=s_reset;
	endcase
end

always@(posedge clk)begin
	case(cstate)
		s_reset:begin
			round<=0;
			cipher_ready<=1'b0;
			//arrange data
			for(i=0;i<16;i=i+1)begin
				plaintext[i]<=data[8*i+:8];
			end
			//arrange round key
			for(i=0;i<44;i=i+1)begin
				if(i<4)
					W[i]<=init_key[32*i+:32];
				else
					W[i]<=32'h00000000;
			end
			//initial Rconstant
			Rcon[0]<=32'h00000000;
			Rcon[1]<=32'h01000000;
			Rcon[2]<=32'h02000000;
			Rcon[3]<=32'h04000000;
			Rcon[4]<=32'h08000000;
			Rcon[5]<=32'h10000000;
			Rcon[6]<=32'h20000000;
			Rcon[7]<=32'h40000000;
			Rcon[8]<=32'h80000000;
			Rcon[9]<=32'h1b000000;
			Rcon[10]<=32'h36000000;
			//initail s_box	
			s_box[0]<=8'h63;
			s_box[1]<=8'h7c;
			s_box[2]<=8'h77;
			s_box[3]<=8'h7b;
			s_box[4]<=8'hf2;
			s_box[5]<=8'h6b;
			s_box[6]<=8'h6f;
			s_box[7]<=8'hc5;
			s_box[8]<=8'h30;
			s_box[9]<=8'h01;
			s_box[10]<=8'h67;
			s_box[11]<=8'h2b;
			s_box[12]<=8'hfe;
			s_box[13]<=8'hd7;
			s_box[14]<=8'hab;
			s_box[15]<=8'h76;
			s_box[16]<=8'hca;
			s_box[17]<=8'h82;
			s_box[18]<=8'hc9;
			s_box[19]<=8'h7d;
			s_box[20]<=8'hfa;
			s_box[21]<=8'h59;
			s_box[22]<=8'h47;
			s_box[23]<=8'hf0;
			s_box[24]<=8'had;
			s_box[25]<=8'hd4;
			s_box[26]<=8'ha2;
			s_box[27]<=8'haf;
			s_box[28]<=8'h9c;
			s_box[29]<=8'ha4;
			s_box[30]<=8'h72;
			s_box[31]<=8'hc0;
			s_box[32]<=8'hb7;
			s_box[33]<=8'hfd;
			s_box[34]<=8'h93;
			s_box[35]<=8'h26;
			s_box[36]<=8'h36;
			s_box[37]<=8'h3f;
			s_box[38]<=8'hf7;
			s_box[39]<=8'hcc;
			s_box[40]<=8'h34;
			s_box[41]<=8'ha5;
			s_box[42]<=8'he5;
			s_box[43]<=8'hf1;
			s_box[44]<=8'h71;
			s_box[45]<=8'hd8;
			s_box[46]<=8'h31;
			s_box[47]<=8'h15;
			s_box[48]<=8'h04;
			s_box[49]<=8'hc7;
			s_box[50]<=8'h23;
			s_box[51]<=8'hc3;
			s_box[52]<=8'h18;
			s_box[53]<=8'h96;
			s_box[54]<=8'h05;
			s_box[55]<=8'h9a;
			s_box[56]<=8'h07;
			s_box[57]<=8'h12;
			s_box[58]<=8'h80;
			s_box[59]<=8'he2;
			s_box[60]<=8'heb;
			s_box[61]<=8'h27;
			s_box[62]<=8'hb2;
			s_box[63]<=8'h75;
			s_box[64]<=8'h09;
			s_box[65]<=8'h83;
			s_box[66]<=8'h2c;
			s_box[67]<=8'h1a;
			s_box[68]<=8'h1b;
			s_box[69]<=8'h6e;
			s_box[70]<=8'h5a;
			s_box[71]<=8'ha0;
			s_box[72]<=8'h52;
			s_box[73]<=8'h3b;
			s_box[74]<=8'hd6;
			s_box[75]<=8'hb3;
			s_box[76]<=8'h29;
			s_box[77]<=8'he3;
			s_box[78]<=8'h2f;
			s_box[79]<=8'h84;
			s_box[80]<=8'h53;
			s_box[81]<=8'hd1;
			s_box[82]<=8'h00;
			s_box[83]<=8'hed;
			s_box[84]<=8'h20;
			s_box[85]<=8'hfc;
			s_box[86]<=8'hb1;
			s_box[87]<=8'h5b;
			s_box[88]<=8'h6a;
			s_box[89]<=8'hcb;
			s_box[90]<=8'hbe;
			s_box[91]<=8'h39;
			s_box[92]<=8'h4a;
			s_box[93]<=8'h4c;
			s_box[94]<=8'h58;
			s_box[95]<=8'hcf;
			s_box[96]<=8'hd0;
			s_box[97]<=8'hef;
			s_box[98]<=8'haa;
			s_box[99]<=8'hfb;
			s_box[100]<=8'h43;
			s_box[101]<=8'h4d;
			s_box[102]<=8'h33;
			s_box[103]<=8'h85;
			s_box[104]<=8'h45;
			s_box[105]<=8'hf9;
			s_box[106]<=8'h02;
			s_box[107]<=8'h7f;
			s_box[108]<=8'h50;
			s_box[109]<=8'h3c;
			s_box[110]<=8'h9f;
			s_box[111]<=8'ha8;
			s_box[112]<=8'h51;
			s_box[113]<=8'ha3;
			s_box[114]<=8'h40;
			s_box[115]<=8'h8f;
			s_box[116]<=8'h92;
			s_box[117]<=8'h9d;
			s_box[118]<=8'h38;
			s_box[119]<=8'hf5;
			s_box[120]<=8'hbc;
			s_box[121]<=8'hb6;
			s_box[122]<=8'hda;
			s_box[123]<=8'h21;
			s_box[124]<=8'h10;
			s_box[125]<=8'hff;
			s_box[126]<=8'hf3;
			s_box[127]<=8'hd2;
			s_box[128]<=8'hcd;
			s_box[129]<=8'h0c;
			s_box[130]<=8'h13;
			s_box[131]<=8'hec;
			s_box[132]<=8'h5f;
			s_box[133]<=8'h97;
			s_box[134]<=8'h44;
			s_box[135]<=8'h17;
			s_box[136]<=8'hc4;
			s_box[137]<=8'ha7;
			s_box[138]<=8'h7e;
			s_box[139]<=8'h3d;
			s_box[140]<=8'h64;
			s_box[141]<=8'h5d;
			s_box[142]<=8'h19;
			s_box[143]<=8'h73;
			s_box[144]<=8'h60;
			s_box[145]<=8'h81;
			s_box[146]<=8'h4f;
			s_box[147]<=8'hdc;
			s_box[148]<=8'h22;
			s_box[149]<=8'h2a;
			s_box[150]<=8'h90;
			s_box[151]<=8'h88;
			s_box[152]<=8'h46;
			s_box[153]<=8'hee;
			s_box[154]<=8'hb8;
			s_box[155]<=8'h14;
			s_box[156]<=8'hde;
			s_box[157]<=8'h5e;
			s_box[158]<=8'h0b;
			s_box[159]<=8'hdb;
			s_box[160]<=8'he0;
			s_box[161]<=8'h32;
			s_box[162]<=8'h3a;
			s_box[163]<=8'h0a;
			s_box[164]<=8'h49;
			s_box[165]<=8'h06;
			s_box[166]<=8'h24;
			s_box[167]<=8'h5c;
			s_box[168]<=8'hc2;
			s_box[169]<=8'hd3;
			s_box[170]<=8'hac;
			s_box[171]<=8'h62;
			s_box[172]<=8'h91;
			s_box[173]<=8'h95;
			s_box[174]<=8'he4;
			s_box[175]<=8'h79;
			s_box[176]<=8'he7;
			s_box[177]<=8'hc8;
			s_box[178]<=8'h37;
			s_box[179]<=8'h6d;
			s_box[180]<=8'h8d;
			s_box[181]<=8'hd5;
			s_box[182]<=8'h4e;
			s_box[183]<=8'ha9;
			s_box[184]<=8'h6c;
			s_box[185]<=8'h56;
			s_box[186]<=8'hf4;
			s_box[187]<=8'hea;
			s_box[188]<=8'h65;
			s_box[189]<=8'h7a;
			s_box[190]<=8'hae;
			s_box[191]<=8'h08;
			s_box[192]<=8'hba;
			s_box[193]<=8'h78;
			s_box[194]<=8'h25;
			s_box[195]<=8'h2e;
			s_box[196]<=8'h1c;
			s_box[197]<=8'ha6;
			s_box[198]<=8'hb4;
			s_box[199]<=8'hc6;
			s_box[200]<=8'he8;
			s_box[201]<=8'hdd;
			s_box[202]<=8'h74;
			s_box[203]<=8'h1f;
			s_box[204]<=8'h4b;
			s_box[205]<=8'hbd;
			s_box[206]<=8'h8b;
			s_box[207]<=8'h8a;
			s_box[208]<=8'h70;
			s_box[209]<=8'h3e;
			s_box[210]<=8'hb5;
			s_box[211]<=8'h66;
			s_box[212]<=8'h48;
			s_box[213]<=8'h03;
			s_box[214]<=8'hf6;
			s_box[215]<=8'h0e;
			s_box[216]<=8'h61;
			s_box[217]<=8'h35;
			s_box[218]<=8'h57;
			s_box[219]<=8'hb9;
			s_box[220]<=8'h86;
			s_box[221]<=8'hc1;
			s_box[222]<=8'h1d;
			s_box[223]<=8'h9e;
			s_box[224]<=8'he1;
			s_box[225]<=8'hf8;
			s_box[226]<=8'h98;
			s_box[227]<=8'h11;
			s_box[228]<=8'h69;
			s_box[229]<=8'hd9;
			s_box[230]<=8'h8e;
			s_box[231]<=8'h94;
			s_box[232]<=8'h9b;
			s_box[233]<=8'h1e;
			s_box[234]<=8'h87;
			s_box[235]<=8'he9;
			s_box[236]<=8'hce;
			s_box[237]<=8'h55;
			s_box[238]<=8'h28;
			s_box[239]<=8'hdf;
			s_box[240]<=8'h8c;
			s_box[241]<=8'ha1;
			s_box[242]<=8'h89;
			s_box[243]<=8'h0d;
			s_box[244]<=8'hbf;
			s_box[245]<=8'he6;
			s_box[246]<=8'h42;
			s_box[247]<=8'h68;
			s_box[248]<=8'h41;
			s_box[249]<=8'h99;
			s_box[250]<=8'h2d;
			s_box[251]<=8'h0f;
			s_box[252]<=8'hb0;
			s_box[253]<=8'h54;
			s_box[254]<=8'hbb;
			s_box[255]<=8'h16;
		end
		CalculateRoundKey:begin
                //if(i%4==0) W[i]=W[i-4]^T(W[i-1]) else W[i]=W[i-4]^W[i-1]
				W[4*round]<=W[(4*round)-4]^({s_box[W[(4*round)-1][23:16]],24'h000000}+{8'h00,s_box[W[(4*round)-1][15:8]],16'h0000}+{16'h0000,s_box[W[(4*round)-1][7:0]],8'h00}+{24'h000000,s_box[W[(4*round)-1][31:24]]})^Rcon[round];
			    /*if(round==7)begin
			         mix<={plaintext[0],plaintext[1],plaintext[2],plaintext[3],plaintext[4],plaintext[5],plaintext[6],plaintext[7],plaintext[8],plaintext[9],plaintext[10],plaintext[11],plaintext[12],plaintext[13],plaintext[14],plaintext[15]};
			    end*/
			end
		CalculateRoundKey_2:begin
		        W[4*round+1]<=W[(4*round)-3]^W[(4*round)];
		end
		CalculateRoundKey_3:begin
				W[4*round+2]<=W[(4*round)-2]^W[(4*round)+1];
		end
		CalculateRoundKey_4:begin
		  		W[4*round+3]<=W[(4*round)-1]^W[(4*round)+2];
		end
		AddRoundKey:begin
			plaintext[0]<=plaintext[0]^W[4*round][31:24];
			plaintext[1]<=plaintext[1]^W[4*round][23:16];
			plaintext[2]<=plaintext[2]^W[4*round][15:8];
			plaintext[3]<=plaintext[3]^W[4*round][7:0];
			plaintext[4]<=plaintext[4]^W[4*round+1][31:24];
			plaintext[5]<=plaintext[5]^W[4*round+1][23:16];
			plaintext[6]<=plaintext[6]^W[4*round+1][15:8];
			plaintext[7]<=plaintext[7]^W[4*round+1][7:0];
			plaintext[8]<=plaintext[8]^W[4*round+2][31:24];
			plaintext[9]<=plaintext[9]^W[4*round+2][23:16];
			plaintext[10]<=plaintext[10]^W[4*round+2][15:8];
			plaintext[11]<=plaintext[11]^W[4*round+2][7:0];
			plaintext[12]<=plaintext[12]^W[4*round+3][31:24];
			plaintext[13]<=plaintext[13]^W[4*round+3][23:16];
			plaintext[14]<=plaintext[14]^W[4*round+3][15:8];
			plaintext[15]<=plaintext[15]^W[4*round+3][7:0];
			
		end
		SubBytes:begin //first 4 bits as row last 4 bits as column
			//for(i=0;i<16;i=i+1)begin
		        //plaintext[0]<=s_box[plaintext[0]];
				//plaintext[i]<=8'h32;
			//end
			plaintext[0]<=s_box[plaintext[0]];
			plaintext[1]<=s_box[plaintext[1]];
			plaintext[2]<=s_box[plaintext[2]];
			plaintext[3]<=s_box[plaintext[3]];
			plaintext[4]<=s_box[plaintext[4]];
			plaintext[5]<=s_box[plaintext[5]];
			plaintext[6]<=s_box[plaintext[6]];
			plaintext[7]<=s_box[plaintext[7]];
			plaintext[8]<=s_box[plaintext[8]];
			plaintext[9]<=s_box[plaintext[9]];
			plaintext[10]<=s_box[plaintext[10]];
			plaintext[11]<=s_box[plaintext[11]];
			plaintext[12]<=s_box[plaintext[12]];
			plaintext[13]<=s_box[plaintext[13]];
			plaintext[14]<=s_box[plaintext[14]];
			plaintext[15]<=s_box[plaintext[15]];
			/*if(round==7)begin
			    add<={plaintext[0],plaintext[1],plaintext[2],plaintext[3],plaintext[4],plaintext[5],plaintext[6],plaintext[7],plaintext[8],plaintext[9],plaintext[10],plaintext[11],plaintext[12],plaintext[13],plaintext[14],plaintext[15]};
			end*/
			round<=round+1;
		end
		ShiftRows:begin
		   /*if(round==7)begin
			    sub<={plaintext[0],plaintext[1],plaintext[2],plaintext[3],plaintext[4],plaintext[5],plaintext[6],plaintext[7],plaintext[8],plaintext[9],plaintext[10],plaintext[11],plaintext[12],plaintext[13],plaintext[14],plaintext[15]};
			end*/
			//shift left 0
			plaintext[0]<=plaintext[0];
			plaintext[4]<=plaintext[4];
			plaintext[8]<=plaintext[8];
			plaintext[12]<=plaintext[12];
			//shift left 1
			plaintext[1]<=plaintext[5];
			plaintext[5]<=plaintext[9];
			plaintext[9]<=plaintext[13];
			plaintext[13]<=plaintext[1];
			//shift left 2 
			plaintext[2]<=plaintext[10];
			plaintext[6]<=plaintext[14];
			plaintext[10]<=plaintext[2];
			plaintext[14]<=plaintext[6];
			//shift left 3
			plaintext[3]<=plaintext[15];
			plaintext[7]<=plaintext[3];
			plaintext[11]<=plaintext[7];
			plaintext[15]<=plaintext[11];
			
		end
		CalculateMixColumns_double:begin
			if(plaintext[0][7]==1'b1)begin
				plaintext_double[0]<=(plaintext[0]<<1)^8'b00011011;
			end
			else 
				plaintext_double[0]<=(plaintext[0]<<1);
			if(plaintext[1][7]==1'b1)begin
				plaintext_double[1]<=(plaintext[1]<<1)^8'b00011011;
			end
			else 
				plaintext_double[1]<=(plaintext[1]<<1);
			if(plaintext[2][7]==1'b1)begin
				plaintext_double[2]<=(plaintext[2]<<1)^8'b00011011;
			end
			else 
				plaintext_double[2]<=(plaintext[2]<<1);
			if(plaintext[3][7]==1'b1)begin
				plaintext_double[3]<=(plaintext[3]<<1)^8'b00011011;
			end
			else 
				plaintext_double[3]<=(plaintext[3]<<1);
			if(plaintext[4][7]==1'b1)begin
				plaintext_double[4]<=(plaintext[4]<<1)^8'b00011011;
			end
			else 
				plaintext_double[4]<=(plaintext[4]<<1);
			if(plaintext[5][7]==1'b1)begin
				plaintext_double[5]<=(plaintext[5]<<1)^8'b00011011;
			end
			else 
				plaintext_double[5]<=(plaintext[5]<<1);
			if(plaintext[6][7]==1'b1)begin
				plaintext_double[6]<=(plaintext[6]<<1)^8'b00011011;
			end
			else 
				plaintext_double[6]<=(plaintext[6]<<1);
			if(plaintext[7][7]==1'b1)begin
				plaintext_double[7]<=(plaintext[7]<<1)^8'b00011011;
			end
			else 
				plaintext_double[7]<=(plaintext[7]<<1);
			if(plaintext[8][7]==1'b1)begin
				plaintext_double[8]<=(plaintext[8]<<1)^8'b00011011;
			end
			else 
				plaintext_double[8]<=(plaintext[8]<<1);
			if(plaintext[9][7]==1'b1)begin
				plaintext_double[9]<=(plaintext[9]<<1)^8'b00011011;
			end
			else 
				plaintext_double[9]<=(plaintext[9]<<1);
			if(plaintext[10][7]==1'b1)begin
				plaintext_double[10]<=(plaintext[10]<<1)^8'b00011011;
			end
			else 
				plaintext_double[10]<=(plaintext[10]<<1);
			if(plaintext[11][7]==1'b1)begin
				plaintext_double[11]<=(plaintext[11]<<1)^8'b00011011;
			end
			else 
				plaintext_double[11]<=(plaintext[11]<<1);
			if(plaintext[12][7]==1'b1)begin
				plaintext_double[12]<=(plaintext[12]<<1)^8'b00011011;
			end
			else 
				plaintext_double[12]<=(plaintext[12]<<1);
			if(plaintext[13][7]==1'b1)begin
				plaintext_double[13]<=(plaintext[13]<<1)^8'b00011011;
			end
			else 
				plaintext_double[13]<=(plaintext[13]<<1);
			if(plaintext[14][7]==1'b1)begin
				plaintext_double[14]<=(plaintext[14]<<1)^8'b00011011;
			end
			else 
				plaintext_double[14]<=(plaintext[14]<<1);
			if(plaintext[15][7]==1'b1)begin
				plaintext_double[15]<=(plaintext[15]<<1)^8'b00011011;
			end
			else 
				plaintext_double[15]<=(plaintext[15]<<1);
			/*if(round==7)begin
			    shift<={plaintext[0],plaintext[1],plaintext[2],plaintext[3],plaintext[4],plaintext[5],plaintext[6],plaintext[7],plaintext[8],plaintext[9],plaintext[10],plaintext[11],plaintext[12],plaintext[13],plaintext[14],plaintext[15]};
			end*/
		end
		CalculateMixColumns_triple:begin
			plaintext_triple[0]<=plaintext_double[0]^plaintext[0];
			plaintext_triple[1]<=plaintext_double[1]^plaintext[1];
			plaintext_triple[2]<=plaintext_double[2]^plaintext[2];
			plaintext_triple[3]<=plaintext_double[3]^plaintext[3];
			plaintext_triple[4]<=plaintext_double[4]^plaintext[4];
			plaintext_triple[5]<=plaintext_double[5]^plaintext[5];
			plaintext_triple[6]<=plaintext_double[6]^plaintext[6];
			plaintext_triple[7]<=plaintext_double[7]^plaintext[7];
			plaintext_triple[8]<=plaintext_double[8]^plaintext[8];
			plaintext_triple[9]<=plaintext_double[9]^plaintext[9];
			plaintext_triple[10]<=plaintext_double[10]^plaintext[10];
			plaintext_triple[11]<=plaintext_double[11]^plaintext[11];
			plaintext_triple[12]<=plaintext_double[12]^plaintext[12];
			plaintext_triple[13]<=plaintext_double[13]^plaintext[13];
			plaintext_triple[14]<=plaintext_double[14]^plaintext[14];
			plaintext_triple[15]<=plaintext_double[15]^plaintext[15];
		end
		MixColumns:begin
			//s'(0,j)=2*s(0,j)+3*s(1,j)+  s(2,j)+  s(3,j)
			//s'(1,j)=  s(0,j)+2*s(1,j)+3*s(2,j)+  s(3,j)
			//s'(2,j)=  s(0,j)+  s(1,j)+2*s(2,j)+3*s(3,j)
			//s'(3,j)=3*s(0,j)+  s(1,j)+  s(2,j)+2*s(3,j)
			plaintext[0]<=plaintext_double[0]^plaintext_triple[1]^plaintext[2]^plaintext[3];
			plaintext[1]<=plaintext[0]^plaintext_double[1]^plaintext_triple[2]^plaintext[3];
			plaintext[2]<=plaintext[0]^plaintext[1]^plaintext_double[2]^plaintext_triple[3];
			plaintext[3]<=plaintext_triple[0]^plaintext[1]^plaintext[2]^plaintext_double[3];
			//
			plaintext[4]<=plaintext_double[4]^plaintext_triple[5]^plaintext[6]^plaintext[7];
			plaintext[5]<=plaintext[4]^plaintext_double[5]^plaintext_triple[6]^plaintext[7];
			plaintext[6]<=plaintext[4]^plaintext[5]^plaintext_double[6]^plaintext_triple[7];
			plaintext[7]<=plaintext_triple[4]^plaintext[5]^plaintext[6]^plaintext_double[7];
			//
			plaintext[8]<=plaintext_double[8]^plaintext_triple[9]^plaintext[10]^plaintext[11];
			plaintext[9]<=plaintext[8]^plaintext_double[9]^plaintext_triple[10]^plaintext[11];
			plaintext[10]<=plaintext[8]^plaintext[9]^plaintext_double[10]^plaintext_triple[11];
			plaintext[11]<=plaintext_triple[8]^plaintext[9]^plaintext[10]^plaintext_double[11];
			//
			plaintext[12]<=plaintext_double[12]^plaintext_triple[13]^plaintext[14]^plaintext[15];
			plaintext[13]<=plaintext[12]^plaintext_double[13]^plaintext_triple[14]^plaintext[15];
			plaintext[14]<=plaintext[12]^plaintext[13]^plaintext_double[14]^plaintext_triple[15];
			plaintext[15]<=plaintext_triple[12]^plaintext[13]^plaintext[14]^plaintext_double[15];
			
		end
		done:begin
			for(i=0;i<16;i=i+1)begin
				cipher[8*i+:8]<=plaintext[i];
			end
			cipher_ready<=1'b1;
			/*cipher[0:7]<=plaintext[0];
			cipher[8:15]<=plaintext[1];
			cipher[16:23]<=plaintext[2];
			cipher[24:31]<=plaintext[3];
			cipher[32:39]<=plaintext[4];
			cipher[40:47]<=plaintext[5];
			cipher[48:55]<=plaintext[6];
			cipher[56:63]<=plaintext[7];
			cipher[64:71]<=plaintext[8];
			cipher[72:79]<=plaintext[9];
			cipher[80:87]<=plaintext[10];
			cipher[88:95]<=plaintext[11];
			cipher[96:103]<=plaintext[12];
			cipher[104:111]<=plaintext[13];
			cipher[112:119]<=plaintext[14];
			cipher[120:127]<=plaintext[15];*/
			/*key_1<={W[4],W[5],W[6],W[7]};
			key_2<={W[8],W[9],W[10],W[11]};
			key_3<={W[12],W[13],W[14],W[15]};
			key_4<={W[16],W[17],W[18],W[19]};
			key_5<={W[20],W[21],W[22],W[23]};
			key_6<={W[24],W[25],W[26],W[27]};
			key_7<={W[28],W[29],W[30],W[31]};
			key_8<={W[32],W[33],W[34],W[35]};
			key_9<={W[36],W[37],W[38],W[39]};
			key_10<={W[40],W[41],W[42],W[43]};*/
		end
		default:begin
		end
	endcase
end
endmodule