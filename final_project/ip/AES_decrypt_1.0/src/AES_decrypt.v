module AES_decrypt(
	input clk,
	input rst,//rst=0
	input [0:127] data,          //**changed from [127:0] to [0:127] (plaintext[0]=data[0:7])
	input [0:127] init_key,
	output reg[0:127] plaintext,
	output reg plaintext_ready
	/*output integer round,
	
	output reg [0:127] add , //check the 1st add round key (with initial key)
	output reg [0:127] sub , //check 1st subbytes
	output reg [0:127] shift,//check 1st shiftrow
	output reg [0:127] mix,  //check first mixcolumns
	output reg [4:0] cstate,
	output integer key_round*/
);
integer i;
integer round;//record which round is executed
integer key_round;//used for calculate round key
reg [4:0] nstate;
reg [4:0] cstate;
reg [7:0] cipher [15:0];
reg [7:0] cipher1 [15:0]; //recourd xtime1 of cipher 
reg [7:0] cipher2 [15:0]; //recourd xtime2 of cipher 
reg [7:0] cipher3 [15:0]; //recourd xtime3 of cipher
reg [7:0] cipher09 [15:0]; //recourd cipher*09
reg [7:0] cipher0b [15:0]; //recourd cipher*0b
reg [7:0] cipher0d [15:0]; //recourd cipher*0d
reg [7:0] cipher0e [15:0]; //recourd cipher*0e
parameter s_reset=5'd0,AddRoundKey=5'd1,CalculateRoundKey=5'd2,CalculateRoundKey_2=5'd3,CalculateRoundKey_3=5'd4,CalculateRoundKey_4=5'd5
       ,InvSubBytes=5'd6,InvShiftRows=5'd7,InvMixColumns=5'd8,done=5'd9,xtime1=5'd10,xtime2=5'd11,xtime3=5'd12,Calculate=5'd13;
reg [7:0] s_box [255:0];
reg [7:0] inv_s_box [255:0];
reg [31:0] W[43:0]; //round key W[0]~W[3]:initial key ;W[4]~W[7]:first round key ;and so on...
reg [31:0] Rcon [10:0];

always@(posedge clk)begin
	if(!rst)
		cstate<=s_reset;
	else 
		cstate<=nstate;
end

always@(*)begin
	case(cstate)
		s_reset:nstate=CalculateRoundKey;
		CalculateRoundKey:nstate=CalculateRoundKey_2;
		CalculateRoundKey_2:nstate=CalculateRoundKey_3;
		CalculateRoundKey_3:nstate=CalculateRoundKey_4;
		CalculateRoundKey_4:nstate=(key_round==10)?AddRoundKey:CalculateRoundKey;
		AddRoundKey:nstate=(round==10)?done:xtime1;
		xtime1:nstate=xtime2;
		xtime2:nstate=xtime3;
		xtime3:nstate=Calculate;
		Calculate:nstate=InvMixColumns;
		InvSubBytes:nstate=AddRoundKey;
		InvShiftRows:nstate=InvSubBytes;
		InvMixColumns:nstate=InvShiftRows;
		done:nstate=done;
		default:nstate=s_reset;
	endcase
end

always@(posedge clk)begin
	case(cstate)
		s_reset:begin
			round<=0;
			key_round<=1;
			plaintext_ready<=1'b0;
			//arrange data
			for(i=0;i<16;i=i+1)begin
				cipher[i]<=data[8*i+:8];
			end
			for(i=0;i<4;i=i+1)begin
			     W[i]<=init_key[32*i+:32];
			end
			//initial Rconstant
			Rcon[0]<=32'h00000000;
			Rcon[1]<=32'h01000000;
			Rcon[2]<=32'h02000000;
			Rcon[3]<=32'h04000000;
			Rcon[4]<=32'h08000000;
			Rcon[5]<=32'h10000000;
			Rcon[6]<=32'h20000000;
			Rcon[7]<=32'h40000000;
			Rcon[8]<=32'h80000000;
			Rcon[9]<=32'h1b000000;
			Rcon[10]<=32'h36000000;
			//initail s_box	
			s_box[0]<=8'h63;
			s_box[1]<=8'h7c;
			s_box[2]<=8'h77;
			s_box[3]<=8'h7b;
			s_box[4]<=8'hf2;
			s_box[5]<=8'h6b;
			s_box[6]<=8'h6f;
			s_box[7]<=8'hc5;
			s_box[8]<=8'h30;
			s_box[9]<=8'h01;
			s_box[10]<=8'h67;
			s_box[11]<=8'h2b;
			s_box[12]<=8'hfe;
			s_box[13]<=8'hd7;
			s_box[14]<=8'hab;
			s_box[15]<=8'h76;
			s_box[16]<=8'hca;
			s_box[17]<=8'h82;
			s_box[18]<=8'hc9;
			s_box[19]<=8'h7d;
			s_box[20]<=8'hfa;
			s_box[21]<=8'h59;
			s_box[22]<=8'h47;
			s_box[23]<=8'hf0;
			s_box[24]<=8'had;
			s_box[25]<=8'hd4;
			s_box[26]<=8'ha2;
			s_box[27]<=8'haf;
			s_box[28]<=8'h9c;
			s_box[29]<=8'ha4;
			s_box[30]<=8'h72;
			s_box[31]<=8'hc0;
			s_box[32]<=8'hb7;
			s_box[33]<=8'hfd;
			s_box[34]<=8'h93;
			s_box[35]<=8'h26;
			s_box[36]<=8'h36;
			s_box[37]<=8'h3f;
			s_box[38]<=8'hf7;
			s_box[39]<=8'hcc;
			s_box[40]<=8'h34;
			s_box[41]<=8'ha5;
			s_box[42]<=8'he5;
			s_box[43]<=8'hf1;
			s_box[44]<=8'h71;
			s_box[45]<=8'hd8;
			s_box[46]<=8'h31;
			s_box[47]<=8'h15;
			s_box[48]<=8'h04;
			s_box[49]<=8'hc7;
			s_box[50]<=8'h23;
			s_box[51]<=8'hc3;
			s_box[52]<=8'h18;
			s_box[53]<=8'h96;
			s_box[54]<=8'h05;
			s_box[55]<=8'h9a;
			s_box[56]<=8'h07;
			s_box[57]<=8'h12;
			s_box[58]<=8'h80;
			s_box[59]<=8'he2;
			s_box[60]<=8'heb;
			s_box[61]<=8'h27;
			s_box[62]<=8'hb2;
			s_box[63]<=8'h75;
			s_box[64]<=8'h09;
			s_box[65]<=8'h83;
			s_box[66]<=8'h2c;
			s_box[67]<=8'h1a;
			s_box[68]<=8'h1b;
			s_box[69]<=8'h6e;
			s_box[70]<=8'h5a;
			s_box[71]<=8'ha0;
			s_box[72]<=8'h52;
			s_box[73]<=8'h3b;
			s_box[74]<=8'hd6;
			s_box[75]<=8'hb3;
			s_box[76]<=8'h29;
			s_box[77]<=8'he3;
			s_box[78]<=8'h2f;
			s_box[79]<=8'h84;
			s_box[80]<=8'h53;
			s_box[81]<=8'hd1;
			s_box[82]<=8'h00;
			s_box[83]<=8'hed;
			s_box[84]<=8'h20;
			s_box[85]<=8'hfc;
			s_box[86]<=8'hb1;
			s_box[87]<=8'h5b;
			s_box[88]<=8'h6a;
			s_box[89]<=8'hcb;
			s_box[90]<=8'hbe;
			s_box[91]<=8'h39;
			s_box[92]<=8'h4a;
			s_box[93]<=8'h4c;
			s_box[94]<=8'h58;
			s_box[95]<=8'hcf;
			s_box[96]<=8'hd0;
			s_box[97]<=8'hef;
			s_box[98]<=8'haa;
			s_box[99]<=8'hfb;
			s_box[100]<=8'h43;
			s_box[101]<=8'h4d;
			s_box[102]<=8'h33;
			s_box[103]<=8'h85;
			s_box[104]<=8'h45;
			s_box[105]<=8'hf9;
			s_box[106]<=8'h02;
			s_box[107]<=8'h7f;
			s_box[108]<=8'h50;
			s_box[109]<=8'h3c;
			s_box[110]<=8'h9f;
			s_box[111]<=8'ha8;
			s_box[112]<=8'h51;
			s_box[113]<=8'ha3;
			s_box[114]<=8'h40;
			s_box[115]<=8'h8f;
			s_box[116]<=8'h92;
			s_box[117]<=8'h9d;
			s_box[118]<=8'h38;
			s_box[119]<=8'hf5;
			s_box[120]<=8'hbc;
			s_box[121]<=8'hb6;
			s_box[122]<=8'hda;
			s_box[123]<=8'h21;
			s_box[124]<=8'h10;
			s_box[125]<=8'hff;
			s_box[126]<=8'hf3;
			s_box[127]<=8'hd2;
			s_box[128]<=8'hcd;
			s_box[129]<=8'h0c;
			s_box[130]<=8'h13;
			s_box[131]<=8'hec;
			s_box[132]<=8'h5f;
			s_box[133]<=8'h97;
			s_box[134]<=8'h44;
			s_box[135]<=8'h17;
			s_box[136]<=8'hc4;
			s_box[137]<=8'ha7;
			s_box[138]<=8'h7e;
			s_box[139]<=8'h3d;
			s_box[140]<=8'h64;
			s_box[141]<=8'h5d;
			s_box[142]<=8'h19;
			s_box[143]<=8'h73;
			s_box[144]<=8'h60;
			s_box[145]<=8'h81;
			s_box[146]<=8'h4f;
			s_box[147]<=8'hdc;
			s_box[148]<=8'h22;
			s_box[149]<=8'h2a;
			s_box[150]<=8'h90;
			s_box[151]<=8'h88;
			s_box[152]<=8'h46;
			s_box[153]<=8'hee;
			s_box[154]<=8'hb8;
			s_box[155]<=8'h14;
			s_box[156]<=8'hde;
			s_box[157]<=8'h5e;
			s_box[158]<=8'h0b;
			s_box[159]<=8'hdb;
			s_box[160]<=8'he0;
			s_box[161]<=8'h32;
			s_box[162]<=8'h3a;
			s_box[163]<=8'h0a;
			s_box[164]<=8'h49;
			s_box[165]<=8'h06;
			s_box[166]<=8'h24;
			s_box[167]<=8'h5c;
			s_box[168]<=8'hc2;
			s_box[169]<=8'hd3;
			s_box[170]<=8'hac;
			s_box[171]<=8'h62;
			s_box[172]<=8'h91;
			s_box[173]<=8'h95;
			s_box[174]<=8'he4;
			s_box[175]<=8'h79;
			s_box[176]<=8'he7;
			s_box[177]<=8'hc8;
			s_box[178]<=8'h37;
			s_box[179]<=8'h6d;
			s_box[180]<=8'h8d;
			s_box[181]<=8'hd5;
			s_box[182]<=8'h4e;
			s_box[183]<=8'ha9;
			s_box[184]<=8'h6c;
			s_box[185]<=8'h56;
			s_box[186]<=8'hf4;
			s_box[187]<=8'hea;
			s_box[188]<=8'h65;
			s_box[189]<=8'h7a;
			s_box[190]<=8'hae;
			s_box[191]<=8'h08;
			s_box[192]<=8'hba;
			s_box[193]<=8'h78;
			s_box[194]<=8'h25;
			s_box[195]<=8'h2e;
			s_box[196]<=8'h1c;
			s_box[197]<=8'ha6;
			s_box[198]<=8'hb4;
			s_box[199]<=8'hc6;
			s_box[200]<=8'he8;
			s_box[201]<=8'hdd;
			s_box[202]<=8'h74;
			s_box[203]<=8'h1f;
			s_box[204]<=8'h4b;
			s_box[205]<=8'hbd;
			s_box[206]<=8'h8b;
			s_box[207]<=8'h8a;
			s_box[208]<=8'h70;
			s_box[209]<=8'h3e;
			s_box[210]<=8'hb5;
			s_box[211]<=8'h66;
			s_box[212]<=8'h48;
			s_box[213]<=8'h03;
			s_box[214]<=8'hf6;
			s_box[215]<=8'h0e;
			s_box[216]<=8'h61;
			s_box[217]<=8'h35;
			s_box[218]<=8'h57;
			s_box[219]<=8'hb9;
			s_box[220]<=8'h86;
			s_box[221]<=8'hc1;
			s_box[222]<=8'h1d;
			s_box[223]<=8'h9e;
			s_box[224]<=8'he1;
			s_box[225]<=8'hf8;
			s_box[226]<=8'h98;
			s_box[227]<=8'h11;
			s_box[228]<=8'h69;
			s_box[229]<=8'hd9;
			s_box[230]<=8'h8e;
			s_box[231]<=8'h94;
			s_box[232]<=8'h9b;
			s_box[233]<=8'h1e;
			s_box[234]<=8'h87;
			s_box[235]<=8'he9;
			s_box[236]<=8'hce;
			s_box[237]<=8'h55;
			s_box[238]<=8'h28;
			s_box[239]<=8'hdf;
			s_box[240]<=8'h8c;
			s_box[241]<=8'ha1;
			s_box[242]<=8'h89;
			s_box[243]<=8'h0d;
			s_box[244]<=8'hbf;
			s_box[245]<=8'he6;
			s_box[246]<=8'h42;
			s_box[247]<=8'h68;
			s_box[248]<=8'h41;
			s_box[249]<=8'h99;
			s_box[250]<=8'h2d;
			s_box[251]<=8'h0f;
			s_box[252]<=8'hb0;
			s_box[253]<=8'h54;
			s_box[254]<=8'hbb;
			s_box[255]<=8'h16;
			//inverse s_box
			inv_s_box[0]<=8'h52;
            inv_s_box[1]<=8'h09;
            inv_s_box[2]<=8'h6a;
            inv_s_box[3]<=8'hd5;
            inv_s_box[4]<=8'h30;
            inv_s_box[5]<=8'h36;
            inv_s_box[6]<=8'ha5;
            inv_s_box[7]<=8'h38;
            inv_s_box[8]<=8'hbf;
            inv_s_box[9]<=8'h40;
            inv_s_box[10]<=8'ha3;
            inv_s_box[11]<=8'h9e;
            inv_s_box[12]<=8'h81;
            inv_s_box[13]<=8'hf3;
            inv_s_box[14]<=8'hd7;
            inv_s_box[15]<=8'hfb;
            inv_s_box[16]<=8'h7c;
            inv_s_box[17]<=8'he3;
            inv_s_box[18]<=8'h39;
            inv_s_box[19]<=8'h82;
            inv_s_box[20]<=8'h9b;
            inv_s_box[21]<=8'h2f;
            inv_s_box[22]<=8'hff;
            inv_s_box[23]<=8'h87;
            inv_s_box[24]<=8'h34;
            inv_s_box[25]<=8'h8e;
            inv_s_box[26]<=8'h43;
            inv_s_box[27]<=8'h44;
            inv_s_box[28]<=8'hc4;
            inv_s_box[29]<=8'hde;
            inv_s_box[30]<=8'he9;
            inv_s_box[31]<=8'hcb;
            inv_s_box[32]<=8'h54;
            inv_s_box[33]<=8'h7b;
            inv_s_box[34]<=8'h94;
            inv_s_box[35]<=8'h32;
            inv_s_box[36]<=8'ha6;
            inv_s_box[37]<=8'hc2;
            inv_s_box[38]<=8'h23;
            inv_s_box[39]<=8'h3d;
            inv_s_box[40]<=8'hee;
            inv_s_box[41]<=8'h4c;
            inv_s_box[42]<=8'h95;
            inv_s_box[43]<=8'h0b;
            inv_s_box[44]<=8'h42;
            inv_s_box[45]<=8'hfa;
            inv_s_box[46]<=8'hc3;
            inv_s_box[47]<=8'h4e;
            inv_s_box[48]<=8'h08;
            inv_s_box[49]<=8'h2e;
            inv_s_box[50]<=8'ha1;
            inv_s_box[51]<=8'h66;
            inv_s_box[52]<=8'h28;
            inv_s_box[53]<=8'hd9;
            inv_s_box[54]<=8'h24;
            inv_s_box[55]<=8'hb2;
            inv_s_box[56]<=8'h76;
            inv_s_box[57]<=8'h5b;
            inv_s_box[58]<=8'ha2;
            inv_s_box[59]<=8'h49;
            inv_s_box[60]<=8'h6d;
            inv_s_box[61]<=8'h8b;
            inv_s_box[62]<=8'hd1;
            inv_s_box[63]<=8'h25;
            inv_s_box[64]<=8'h72;
            inv_s_box[65]<=8'hf8;
            inv_s_box[66]<=8'hf6;
            inv_s_box[67]<=8'h64;
            inv_s_box[68]<=8'h86;
            inv_s_box[69]<=8'h68;
            inv_s_box[70]<=8'h98;
            inv_s_box[71]<=8'h16;
            inv_s_box[72]<=8'hd4;
            inv_s_box[73]<=8'ha4;
            inv_s_box[74]<=8'h5c;
            inv_s_box[75]<=8'hcc;
            inv_s_box[76]<=8'h5d;
            inv_s_box[77]<=8'h65;
            inv_s_box[78]<=8'hb6;
            inv_s_box[79]<=8'h92;
            inv_s_box[80]<=8'h6c;
            inv_s_box[81]<=8'h70;
            inv_s_box[82]<=8'h48;
            inv_s_box[83]<=8'h50;
            inv_s_box[84]<=8'hfd;
            inv_s_box[85]<=8'hed;
            inv_s_box[86]<=8'hb9;
            inv_s_box[87]<=8'hda;
            inv_s_box[88]<=8'h5e;
            inv_s_box[89]<=8'h15;
            inv_s_box[90]<=8'h46;
            inv_s_box[91]<=8'h57;
            inv_s_box[92]<=8'ha7;
            inv_s_box[93]<=8'h8d;
            inv_s_box[94]<=8'h9d;
            inv_s_box[95]<=8'h84;
            inv_s_box[96]<=8'h90;
            inv_s_box[97]<=8'hd8;
            inv_s_box[98]<=8'hab;
            inv_s_box[99]<=8'h00;
            inv_s_box[100]<=8'h8c;
            inv_s_box[101]<=8'hbc;
            inv_s_box[102]<=8'hd3;
            inv_s_box[103]<=8'h0a;
            inv_s_box[104]<=8'hf7;
            inv_s_box[105]<=8'he4;
            inv_s_box[106]<=8'h58;
            inv_s_box[107]<=8'h05;
            inv_s_box[108]<=8'hb8;
            inv_s_box[109]<=8'hb3;
            inv_s_box[110]<=8'h45;
            inv_s_box[111]<=8'h06;
            inv_s_box[112]<=8'hd0;
            inv_s_box[113]<=8'h2c;
            inv_s_box[114]<=8'h1e;
            inv_s_box[115]<=8'h8f;
            inv_s_box[116]<=8'hca;
            inv_s_box[117]<=8'h3f;
            inv_s_box[118]<=8'h0f;
            inv_s_box[119]<=8'h02;
            inv_s_box[120]<=8'hc1;
            inv_s_box[121]<=8'haf;
            inv_s_box[122]<=8'hbd;
            inv_s_box[123]<=8'h03;
            inv_s_box[124]<=8'h01;
            inv_s_box[125]<=8'h13;
            inv_s_box[126]<=8'h8a;
            inv_s_box[127]<=8'h6b;
            inv_s_box[128]<=8'h3a;
            inv_s_box[129]<=8'h91;
            inv_s_box[130]<=8'h11;
            inv_s_box[131]<=8'h41;
            inv_s_box[132]<=8'h4f;
            inv_s_box[133]<=8'h67;
            inv_s_box[134]<=8'hdc;
            inv_s_box[135]<=8'hea;
            inv_s_box[136]<=8'h97;
            inv_s_box[137]<=8'hf2;
            inv_s_box[138]<=8'hcf;
            inv_s_box[139]<=8'hce;
            inv_s_box[140]<=8'hf0;
            inv_s_box[141]<=8'hb4;
            inv_s_box[142]<=8'he6;
            inv_s_box[143]<=8'h73;
            inv_s_box[144]<=8'h96;
            inv_s_box[145]<=8'hac;
            inv_s_box[146]<=8'h74;
            inv_s_box[147]<=8'h22;
            inv_s_box[148]<=8'he7;
            inv_s_box[149]<=8'had;
            inv_s_box[150]<=8'h35;
            inv_s_box[151]<=8'h85;
            inv_s_box[152]<=8'he2;
            inv_s_box[153]<=8'hf9;
            inv_s_box[154]<=8'h37;
            inv_s_box[155]<=8'he8;
            inv_s_box[156]<=8'h1c;
            inv_s_box[157]<=8'h75;
            inv_s_box[158]<=8'hdf;
            inv_s_box[159]<=8'h6e;
            inv_s_box[160]<=8'h47;
            inv_s_box[161]<=8'hf1;
            inv_s_box[162]<=8'h1a;
            inv_s_box[163]<=8'h71;
            inv_s_box[164]<=8'h1d;
            inv_s_box[165]<=8'h29;
            inv_s_box[166]<=8'hc5;
            inv_s_box[167]<=8'h89;
            inv_s_box[168]<=8'h6f;
            inv_s_box[169]<=8'hb7;
            inv_s_box[170]<=8'h62;
            inv_s_box[171]<=8'h0e;
            inv_s_box[172]<=8'haa;
            inv_s_box[173]<=8'h18;
            inv_s_box[174]<=8'hbe;
            inv_s_box[175]<=8'h1b;
            inv_s_box[176]<=8'hfc;
            inv_s_box[177]<=8'h56;
            inv_s_box[178]<=8'h3e;
            inv_s_box[179]<=8'h4b;
            inv_s_box[180]<=8'hc6;
            inv_s_box[181]<=8'hd2;
            inv_s_box[182]<=8'h79;
            inv_s_box[183]<=8'h20;
            inv_s_box[184]<=8'h9a;
            inv_s_box[185]<=8'hdb;
            inv_s_box[186]<=8'hc0;
            inv_s_box[187]<=8'hfe;
            inv_s_box[188]<=8'h78;
            inv_s_box[189]<=8'hcd;
            inv_s_box[190]<=8'h5a;
            inv_s_box[191]<=8'hf4;
            inv_s_box[192]<=8'h1f;
            inv_s_box[193]<=8'hdd;
            inv_s_box[194]<=8'ha8;
            inv_s_box[195]<=8'h33;
            inv_s_box[196]<=8'h88;
            inv_s_box[197]<=8'h07;
            inv_s_box[198]<=8'hc7;
            inv_s_box[199]<=8'h31;
            inv_s_box[200]<=8'hb1;
            inv_s_box[201]<=8'h12;
            inv_s_box[202]<=8'h10;
            inv_s_box[203]<=8'h59;
            inv_s_box[204]<=8'h27;
            inv_s_box[205]<=8'h80;
            inv_s_box[206]<=8'hec;
            inv_s_box[207]<=8'h5f;
            inv_s_box[208]<=8'h60;
            inv_s_box[209]<=8'h51;
            inv_s_box[210]<=8'h7f;
            inv_s_box[211]<=8'ha9;
            inv_s_box[212]<=8'h19;
            inv_s_box[213]<=8'hb5;
            inv_s_box[214]<=8'h4a;
            inv_s_box[215]<=8'h0d;
            inv_s_box[216]<=8'h2d;
            inv_s_box[217]<=8'he5;
            inv_s_box[218]<=8'h7a;
            inv_s_box[219]<=8'h9f;
            inv_s_box[220]<=8'h93;
            inv_s_box[221]<=8'hc9;
            inv_s_box[222]<=8'h9c;
            inv_s_box[223]<=8'hef;
            inv_s_box[224]<=8'ha0;
            inv_s_box[225]<=8'he0;
            inv_s_box[226]<=8'h3b;
            inv_s_box[227]<=8'h4d;
            inv_s_box[228]<=8'hae;
            inv_s_box[229]<=8'h2a;
            inv_s_box[230]<=8'hf5;
            inv_s_box[231]<=8'hb0;
            inv_s_box[232]<=8'hc8;
            inv_s_box[233]<=8'heb;
            inv_s_box[234]<=8'hbb;
            inv_s_box[235]<=8'h3c;
            inv_s_box[236]<=8'h83;
            inv_s_box[237]<=8'h53;
            inv_s_box[238]<=8'h99;
            inv_s_box[239]<=8'h61;
            inv_s_box[240]<=8'h17;
            inv_s_box[241]<=8'h2b;
            inv_s_box[242]<=8'h04;
            inv_s_box[243]<=8'h7e;
            inv_s_box[244]<=8'hba;
            inv_s_box[245]<=8'h77;
            inv_s_box[246]<=8'hd6;
            inv_s_box[247]<=8'h26;
            inv_s_box[248]<=8'he1;
            inv_s_box[249]<=8'h69;
            inv_s_box[250]<=8'h14;
            inv_s_box[251]<=8'h63;
            inv_s_box[252]<=8'h55;
            inv_s_box[253]<=8'h21;
            inv_s_box[254]<=8'h0c;
            inv_s_box[255]<=8'h7d;
		end
		CalculateRoundKey:begin
                //if(i%4==0) W[i]=W[i-4]^T(W[i-1]) else W[i]=W[i-4]^W[i-1]
				//calculate T(W[i-1])
				//element shifting
				//W[(4*round)-1]<=(W[(4*round)-1]<<8)+{24'h000000,W[(4*round)-1][31:24]};
				//s_box mapping
				//W[(4*round)-1]<={s_box[W[(4*round)-1][23:16]],24'h000000}+{8'h00,s_box[W[(4*round)-1][15:8]],16'h0000}+{16'h0000,s_box[W[(4*round)-1][7:0]],8'h00}+{24'h000000,s_box[W[(4*round)-1][31:24]]}^Rcon[round];
				//xor with Rconstan
				//W[(4*round)-1]<=W[(4*round)-1]^Rcon[round];
				//end of calculate T(W[i-1])
				//W[4*round]<=W[(4*round)-4]^W[(4*round)-1];
				W[4*key_round]<=W[(4*key_round)-4]^{s_box[W[(4*key_round)-1][23:16]],24'h000000}+{8'h00,s_box[W[(4*key_round)-1][15:8]],16'h0000}+{16'h0000,s_box[W[(4*key_round)-1][7:0]],8'h00}+{24'h000000,s_box[W[(4*key_round)-1][31:24]]}^Rcon[key_round];
			end
		CalculateRoundKey_2:begin
		    W[4*key_round+1]<=W[(4*key_round)-3]^W[(4*key_round)];
		end
		CalculateRoundKey_3:begin
			W[4*key_round+2]<=W[(4*key_round)-2]^W[(4*key_round)+1];
		end
		CalculateRoundKey_4:begin
		  	W[4*key_round+3]<=W[(4*key_round)-1]^W[(4*key_round)+2];
		  	key_round<=key_round+1;
		end
		AddRoundKey:begin
			cipher[0]<=cipher[0]^W[4*(10-round)][31:24];
			cipher[1]<=cipher[1]^W[4*(10-round)][23:16];
			cipher[2]<=cipher[2]^W[4*(10-round)][15:8];
			cipher[3]<=cipher[3]^W[4*(10-round)][7:0];
			cipher[4]<=cipher[4]^W[4*(10-round)+1][31:24];
			cipher[5]<=cipher[5]^W[4*(10-round)+1][23:16];
			cipher[6]<=cipher[6]^W[4*(10-round)+1][15:8];
			cipher[7]<=cipher[7]^W[4*(10-round)+1][7:0];
			cipher[8]<=cipher[8]^W[4*(10-round)+2][31:24];
			cipher[9]<=cipher[9]^W[4*(10-round)+2][23:16];
			cipher[10]<=cipher[10]^W[4*(10-round)+2][15:8];
			cipher[11]<=cipher[11]^W[4*(10-round)+2][7:0];
			cipher[12]<=cipher[12]^W[4*(10-round)+3][31:24];
			cipher[13]<=cipher[13]^W[4*(10-round)+3][23:16];
			cipher[14]<=cipher[14]^W[4*(10-round)+3][15:8];
			cipher[15]<=cipher[15]^W[4*(10-round)+3][7:0];
			
			/*if(round==10)begin
			    sub<={cipher[0],cipher[1],cipher[2],cipher[3],cipher[4],cipher[5],cipher[6],cipher[7],cipher[8],cipher[9],cipher[10],cipher[11],cipher[12],cipher[13],cipher[14],cipher[15]};
			end*/
		end
		InvSubBytes:begin //first 4 bits as row last 4 bits as column
			cipher[0]<=inv_s_box[cipher[0]];
			cipher[1]<=inv_s_box[cipher[1]];
			cipher[2]<=inv_s_box[cipher[2]];
			cipher[3]<=inv_s_box[cipher[3]];
			cipher[4]<=inv_s_box[cipher[4]];
			cipher[5]<=inv_s_box[cipher[5]];
			cipher[6]<=inv_s_box[cipher[6]];
			cipher[7]<=inv_s_box[cipher[7]];
			cipher[8]<=inv_s_box[cipher[8]];
			cipher[9]<=inv_s_box[cipher[9]];
			cipher[10]<=inv_s_box[cipher[10]];
			cipher[11]<=inv_s_box[cipher[11]];
			cipher[12]<=inv_s_box[cipher[12]];
			cipher[13]<=inv_s_box[cipher[13]];
			cipher[14]<=inv_s_box[cipher[14]];
			cipher[15]<=inv_s_box[cipher[15]];
			 /*if(round==10)begin
			    shift<={cipher[0],cipher[1],cipher[2],cipher[3],cipher[4],cipher[5],cipher[6],cipher[7],cipher[8],cipher[9],cipher[10],cipher[11],cipher[12],cipher[13],cipher[14],cipher[15]};
			end*/
		end
		InvShiftRows:begin
		   /* if(round==10)begin
			    mix<={cipher[0],cipher[1],cipher[2],cipher[3],cipher[4],cipher[5],cipher[6],cipher[7],cipher[8],cipher[9],cipher[10],cipher[11],cipher[12],cipher[13],cipher[14],cipher[15]};
			end*/
			//shift right 0
			cipher[0]<=cipher[0];
			cipher[4]<=cipher[4];
			cipher[8]<=cipher[8];
			cipher[12]<=cipher[12];
			//shift right 1
			cipher[1]<=cipher[13];
			cipher[5]<=cipher[1];
			cipher[9]<=cipher[5];
			cipher[13]<=cipher[9];
			//shift right 2 
			cipher[2]<=cipher[10];
			cipher[6]<=cipher[14];
			cipher[10]<=cipher[2];
			cipher[14]<=cipher[6];
			//shift right 3
			cipher[3]<=cipher[7];
			cipher[7]<=cipher[11];
			cipher[11]<=cipher[15];
			cipher[15]<=cipher[3];
			 
		end
		xtime1:begin
		    if(cipher[0][7]==1'b1)
				cipher1[0]<=(cipher[0]<<1)^8'b00011011;
			else 
				cipher1[0]<=(cipher[0]<<1);
			if(cipher[1][7]==1'b1)
				cipher1[1]<=(cipher[1]<<1)^8'b00011011;
			else 
				cipher1[1]<=(cipher[1]<<1);
			if(cipher[2][7]==1'b1)
				cipher1[2]<=(cipher[2]<<1)^8'b00011011;
			else 
				cipher1[2]<=(cipher[2]<<1);
			if(cipher[3][7]==1'b1)
				cipher1[3]<=(cipher[3]<<1)^8'b00011011;
			else 
				cipher1[3]<=(cipher[3]<<1);
			if(cipher[4][7]==1'b1)
				cipher1[4]<=(cipher[4]<<1)^8'b00011011;
			else 
				cipher1[4]<=(cipher[4]<<1);
			if(cipher[5][7]==1'b1)
				cipher1[5]<=(cipher[5]<<1)^8'b00011011;
			else 
				cipher1[5]<=(cipher[5]<<1);
			if(cipher[6][7]==1'b1)
				cipher1[6]<=(cipher[6]<<1)^8'b00011011;
			else 
				cipher1[6]<=(cipher[6]<<1);
			if(cipher[7][7]==1'b1)
				cipher1[7]<=(cipher[7]<<1)^8'b00011011;
			else 
				cipher1[7]<=(cipher[7]<<1);
			if(cipher[8][7]==1'b1)
				cipher1[8]<=(cipher[8]<<1)^8'b00011011;
			else 
				cipher1[8]<=(cipher[8]<<1);
			if(cipher[9][7]==1'b1)
				cipher1[9]<=(cipher[9]<<1)^8'b00011011;
			else 
				cipher1[9]<=(cipher[9]<<1);
			if(cipher[10][7]==1'b1)
				cipher1[10]<=(cipher[10]<<1)^8'b00011011;
			else 
				cipher1[10]<=(cipher[10]<<1);
			if(cipher[11][7]==1'b1)
				cipher1[11]<=(cipher[11]<<1)^8'b00011011;
			else 
				cipher1[11]<=(cipher[11]<<1);
			if(cipher[12][7]==1'b1)
				cipher1[12]<=(cipher[12]<<1)^8'b00011011;
			else 
				cipher1[12]<=(cipher[12]<<1);
			if(cipher[13][7]==1'b1)
				cipher1[13]<=(cipher[13]<<1)^8'b00011011;
			else 
				cipher1[13]<=(cipher[13]<<1);
			if(cipher[14][7]==1'b1)
				cipher1[14]<=(cipher[14]<<1)^8'b00011011;
			else 
				cipher1[14]<=(cipher[14]<<1);
			if(cipher[15][7]==1'b1)
				cipher1[15]<=(cipher[15]<<1)^8'b00011011;
			else 
				cipher1[15]<=(cipher[15]<<1);
		end
		xtime2:begin
	        if(cipher1[0][7]==1'b1)
				cipher2[0]<=(cipher1[0]<<1)^8'b00011011;
			else 
				cipher2[0]<=(cipher1[0]<<1);
			if(cipher1[1][7]==1'b1)
				cipher2[1]<=(cipher1[1]<<1)^8'b00011011;
			else 
				cipher2[1]<=(cipher1[1]<<1);
			if(cipher1[2][7]==1'b1)
				cipher2[2]<=(cipher1[2]<<1)^8'b00011011;
			else 
				cipher2[2]<=(cipher1[2]<<1);
			if(cipher1[3][7]==1'b1)
				cipher2[3]<=(cipher1[3]<<1)^8'b00011011;
			else 
				cipher2[3]<=(cipher1[3]<<1);
			if(cipher1[4][7]==1'b1)
				cipher2[4]<=(cipher1[4]<<1)^8'b00011011;
			else 
				cipher2[4]<=(cipher1[4]<<1);
			if(cipher1[5][7]==1'b1)
				cipher2[5]<=(cipher1[5]<<1)^8'b00011011;
			else 
				cipher2[5]<=(cipher1[5]<<1);
			if(cipher1[6][7]==1'b1)
				cipher2[6]<=(cipher1[6]<<1)^8'b00011011;
			else 
				cipher2[6]<=(cipher1[6]<<1);
			if(cipher1[7][7]==1'b1)
				cipher2[7]<=(cipher1[7]<<1)^8'b00011011;
			else 
				cipher2[7]<=(cipher1[7]<<1);
			if(cipher1[8][7]==1'b1)
				cipher2[8]<=(cipher1[8]<<1)^8'b00011011;
			else 
				cipher2[8]<=(cipher1[8]<<1);
			if(cipher1[9][7]==1'b1)
				cipher2[9]<=(cipher1[9]<<1)^8'b00011011;
			else 
				cipher2[9]<=(cipher1[9]<<1);
			if(cipher1[10][7]==1'b1)
				cipher2[10]<=(cipher1[10]<<1)^8'b00011011;
			else 
				cipher2[10]<=(cipher1[10]<<1);
			if(cipher1[11][7]==1'b1)
				cipher2[11]<=(cipher1[11]<<1)^8'b00011011;
			else 
				cipher2[11]<=(cipher1[11]<<1);
			if(cipher1[12][7]==1'b1)
				cipher2[12]<=(cipher1[12]<<1)^8'b00011011;
			else 
				cipher2[12]<=(cipher1[12]<<1);
			if(cipher1[13][7]==1'b1)
				cipher2[13]<=(cipher1[13]<<1)^8'b00011011;
			else 
				cipher2[13]<=(cipher1[13]<<1);
			if(cipher1[14][7]==1'b1)
				cipher2[14]<=(cipher1[14]<<1)^8'b00011011;
			else 
				cipher2[14]<=(cipher1[14]<<1);
			if(cipher1[15][7]==1'b1)
				cipher2[15]<=(cipher1[15]<<1)^8'b00011011;
			else 
				cipher2[15]<=(cipher1[15]<<1);  
		end
		xtime3:begin
		     if(cipher2[0][7]==1'b1)
				cipher3[0]<=(cipher2[0]<<1)^8'b00011011;
			else 
				cipher3[0]<=(cipher2[0]<<1);
			if(cipher2[1][7]==1'b1)
				cipher3[1]<=(cipher2[1]<<1)^8'b00011011;
			else 
				cipher3[1]<=(cipher2[1]<<1);
			if(cipher2[2][7]==1'b1)
				cipher3[2]<=(cipher2[2]<<1)^8'b00011011;
			else 
				cipher3[2]<=(cipher2[2]<<1);
			if(cipher2[3][7]==1'b1)
				cipher3[3]<=(cipher2[3]<<1)^8'b00011011;
			else 
				cipher3[3]<=(cipher2[3]<<1);
			if(cipher2[4][7]==1'b1)
				cipher3[4]<=(cipher2[4]<<1)^8'b00011011;
			else 
				cipher3[4]<=(cipher2[4]<<1);
			if(cipher2[5][7]==1'b1)
				cipher3[5]<=(cipher2[5]<<1)^8'b00011011;
			else 
				cipher3[5]<=(cipher2[5]<<1);
			if(cipher2[6][7]==1'b1)
				cipher3[6]<=(cipher2[6]<<1)^8'b00011011;
			else 
				cipher3[6]<=(cipher2[6]<<1);
			if(cipher2[7][7]==1'b1)
				cipher3[7]<=(cipher2[7]<<1)^8'b00011011;
			else 
				cipher3[7]<=(cipher2[7]<<1);
			if(cipher2[8][7]==1'b1)
				cipher3[8]<=(cipher2[8]<<1)^8'b00011011;
			else 
				cipher3[8]<=(cipher2[8]<<1);
			if(cipher2[9][7]==1'b1)
				cipher3[9]<=(cipher2[9]<<1)^8'b00011011;
			else 
				cipher3[9]<=(cipher2[9]<<1);
			if(cipher2[10][7]==1'b1)
				cipher3[10]<=(cipher2[10]<<1)^8'b00011011;
			else 
				cipher3[10]<=(cipher2[10]<<1);
			if(cipher2[11][7]==1'b1)
				cipher3[11]<=(cipher2[11]<<1)^8'b00011011;
			else 
				cipher3[11]<=(cipher2[11]<<1);
			if(cipher2[12][7]==1'b1)
				cipher3[12]<=(cipher2[12]<<1)^8'b00011011;
			else 
				cipher3[12]<=(cipher2[12]<<1);
			if(cipher2[13][7]==1'b1)
				cipher3[13]<=(cipher2[13]<<1)^8'b00011011;
			else 
				cipher3[13]<=(cipher2[13]<<1);
			if(cipher2[14][7]==1'b1)
				cipher3[14]<=(cipher2[14]<<1)^8'b00011011;
			else 
				cipher3[14]<=(cipher2[14]<<1);
			if(cipher2[15][7]==1'b1)
				cipher3[15]<=(cipher2[15]<<1)^8'b00011011;
			else 
				cipher3[15]<=(cipher2[15]<<1);
		end
		Calculate:begin  //calculate cipher*09 ,cipher*0b ,cipher*0d ,cipher*0e for InvMixColumns
		      for(i=0;i<16;i=i+1)begin
		          cipher09[i]<=cipher3[i]^cipher[i];
		      end
		      for(i=0;i<16;i=i+1)begin
		          cipher0b[i]<=cipher3[i]^cipher1[i]^cipher[i];
		      end
		      for(i=0;i<16;i=i+1)begin
		          cipher0d[i]<=cipher3[i]^cipher2[i]^cipher[i];
		      end
		      for(i=0;i<16;i=i+1)begin
		          cipher0e[i]<=cipher3[i]^cipher2[i]^cipher1[i];
		      end
		end
		
		InvMixColumns:begin
			//s'(0,j)=0e*s(0,j)+0b*s(1,j)+0d*s(2,j)+09*s(3,j)
			//s'(1,j)=09*s(0,j)+0e*s(1,j)+0b*s(2,j)+0d*s(3,j)
			//s'(2,j)=0d*s(0,j)+09*s(1,j)+0e*s(2,j)+0b*s(3,j)
			//s'(3,j)=0b*s(0,j)+0d*s(1,j)+09*s(2,j)+0e*s(3,j)
			if(round!=0)begin
			     cipher[0]<=cipher0e[0]^cipher0b[1]^cipher0d[2]^cipher09[3];
			     cipher[1]<=cipher0e[1]^cipher0b[2]^cipher0d[3]^cipher09[0];
			     cipher[2]<=cipher0e[2]^cipher0b[3]^cipher0d[0]^cipher09[1];
			     cipher[3]<=cipher0e[3]^cipher0b[0]^cipher0d[1]^cipher09[2];
			     cipher[4]<=cipher0e[4]^cipher0b[5]^cipher0d[6]^cipher09[7];
			     cipher[5]<=cipher0e[5]^cipher0b[6]^cipher0d[7]^cipher09[4];
			     cipher[6]<=cipher0e[6]^cipher0b[7]^cipher0d[4]^cipher09[5];
			     cipher[7]<=cipher0e[7]^cipher0b[4]^cipher0d[5]^cipher09[6];
			     cipher[8]<=cipher0e[8]^cipher0b[9]^cipher0d[10]^cipher09[11];
			     cipher[9]<=cipher0e[9]^cipher0b[10]^cipher0d[11]^cipher09[8];
			     cipher[10]<=cipher0e[10]^cipher0b[11]^cipher0d[8]^cipher09[9];
			     cipher[11]<=cipher0e[11]^cipher0b[8]^cipher0d[9]^cipher09[10];
			     cipher[12]<=cipher0e[12]^cipher0b[13]^cipher0d[14]^cipher09[15];
			     cipher[13]<=cipher0e[13]^cipher0b[14]^cipher0d[15]^cipher09[12];
			     cipher[14]<=cipher0e[14]^cipher0b[15]^cipher0d[12]^cipher09[13];
			     cipher[15]<=cipher0e[15]^cipher0b[12]^cipher0d[13]^cipher09[14];
			end
			else begin
			     for (i=0;i<16;i=i+1)begin
			         cipher[i]<=cipher[i];
			     end
			end
			round<=round+1;
			 /*if(round==10)begin
			    add<={cipher[0],cipher[1],cipher[2],cipher[3],cipher[4],cipher[5],cipher[6],cipher[7],cipher[8],cipher[9],cipher[10],cipher[11],cipher[12],cipher[13],cipher[14],cipher[15]};
			end*/
		end
		done:begin
			for(i=0;i<16;i=i+1)begin
				plaintext[8*i+:8]<=cipher[i];
			end
			plaintext_ready<=1'b1;
		end
		default:begin
		end
	endcase
end
endmodule